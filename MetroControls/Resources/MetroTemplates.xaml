<!--
Copyright (C) 2011-2012, Solal Pirelli
This code is licensed under a modified MIT License (see Properties\Licence.txt for details).
Redistributions of this source code or compiled versions of it must retain the above copyright notice and the licence.
-->

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:my="clr-namespace:MetroControls"
                    xmlns:myInt="clr-namespace:MetroControls.Internals"
                    xmlns:prim="clr-namespace:System.Windows.Controls.Primitives;assembly=PresentationFramework">
    <!-- TextBox -->
    <ControlTemplate TargetType="TextBoxBase" x:Key="MetroTextBoxTemplate">
        <Border BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                Background="{TemplateBinding Background}">
            <ScrollViewer x:Name="PART_ContentHost" />
        </Border>
    </ControlTemplate>

    <!-- ButtonBase -->
    <ControlTemplate TargetType="prim:ButtonBase" x:Key="MetroButtonBaseTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}">
            <ContentPresenter RecognizesAccessKey="True"
                              Content="{TemplateBinding Content}" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                              Margin="{TemplateBinding Padding}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              TextBlock.FontWeight="Bold"
                              TextBlock.Foreground="{TemplateBinding Foreground}">
                <ContentPresenter.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="myInt:TypographyExtensions.TextCasing" Value="UpperCase" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Border>
    </ControlTemplate>

    <!-- CheckBox & RadioButton -->
    <ControlTemplate TargetType="CheckBox" x:Key="MetroCheckBoxTemplate">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Border Height="12" Width="12"
                    Margin="0,2,0,0"
                    Background="{TemplateBinding Background}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}">
                <Grid>
                    <Path x:Name="CheckPath"
                          Stroke="{TemplateBinding Foreground}"
                          Data="M1,1 L9,9 M1,9 L9,1" 
                          Visibility="Collapsed" />
                    <Rectangle x:Name="ThirdStateRectangle" 
                               Margin="1" 
                               Width="10" Height="10" 
                               Fill="{TemplateBinding Foreground}"
                               Visibility="Collapsed" />
                </Grid>
            </Border>
            <ContentPresenter Grid.Column="1"
                              RecognizesAccessKey="True"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <ContentPresenter.Resources>
                    <!-- HACK: override default TextBlock style -->
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="CheckPath" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter TargetName="ThirdStateRectangle" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="RadioButton" x:Key="MetroRadioButtonTemplate">
        <Grid Background="Transparent">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid Margin="0,1,0,0">
                <Ellipse Width="12" Height="12"
                         Stroke="{TemplateBinding BorderBrush}"
                         Fill="{TemplateBinding Background}" />
                <Ellipse x:Name="RadioDot"
                         Width="8" Height="8"
                         HorizontalAlignment="Center" 
                         VerticalAlignment="Center"
                         Fill="{TemplateBinding Foreground}"
                         Visibility="Hidden" />
            </Grid>
            <ContentPresenter RecognizesAccessKey="True"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              Margin="{TemplateBinding Padding}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                <ContentPresenter.Resources>
                    <!-- HACK: override default TextBlock style -->
                    <Style TargetType="TextBlock">
                        <Setter Property="TextWrapping" Value="Wrap" />
                        <Setter Property="HorizontalAlignment" Value="Stretch" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="RadioDot" Property="Visibility" Value="Visible" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ComboBox & ComboBoxItem -->
    <ControlTemplate TargetType="ComboBox" x:Key="MetroComboBoxTemplate">
        <ControlTemplate.Resources>
            <ControlTemplate TargetType="ToggleButton" x:Key="ToggleButtonTemplate">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="16" />
                    </Grid.ColumnDefinitions>
                    <Border Grid.ColumnSpan="2"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" />
                    <!-- The dropdown path-->
                    <Path Grid.Column="1" 
                          Margin="0,0,3,0"
                          Data="M0,0 L4,4 8,0 Z"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center" 
                          Fill="{TemplateBinding Foreground}" />
                </Grid>
            </ControlTemplate>

            <!-- Transparent TextBox -->
            <ControlTemplate TargetType="TextBox" x:Key="TextBoxTemplate">
                <Border x:Name="PART_ContentHost" 
                        Margin="0,0,20,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Focusable="False" />
            </ControlTemplate>
        </ControlTemplate.Resources>
        <Grid>
            <ToggleButton IsChecked="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                          Focusable="False"
                          Template="{StaticResource ToggleButtonTemplate}"
                          Foreground="{TemplateBinding Foreground}"
                          Background="{TemplateBinding Background}"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          Height="{TemplateBinding ActualHeight}"
                          Width="{TemplateBinding ActualWidth}" />

            <ContentPresenter x:Name="ContentSite"
                              Margin="3,0,23,0"
                              HorizontalAlignment="Left"
                              VerticalAlignment="Stretch"
                              Height="{TemplateBinding ActualHeight}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              IsHitTestVisible="False"
                              TextBlock.Foreground="{TemplateBinding Foreground}">
                <ContentPresenter.Resources>
                    <!-- HACK: Override the default TextBlock style-->
                    <Style TargetType="TextBlock">
                        <Setter Property="VerticalAlignment" Value="Center" />
                    </Style>
                </ContentPresenter.Resources>
            </ContentPresenter>

            <TextBox x:Name="PART_EditableTextBox"
                     Template="{StaticResource TextBoxTemplate}"
                     Visibility="Collapsed"
                     IsReadOnly="{TemplateBinding IsReadOnly}"
                     MaxWidth="{TemplateBinding Width}" />

            <Popup x:Name="PART_Popup"
                   Placement="Bottom"
                   Focusable="False"
                   AllowsTransparency="True"
                   IsOpen="{TemplateBinding IsDropDownOpen}"
                   PopupAnimation="Slide">
                <Grid MinWidth="{TemplateBinding ActualWidth}"
                      MaxHeight="{TemplateBinding MaxDropDownHeight}"
                      SnapsToDevicePixels="True">
                    <Border x:Name="DropDownBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,0,1,1"
                            Background="{TemplateBinding Background}" />
                    <ScrollViewer Margin="2,1,2,2">
                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
            </Trigger>

            <Trigger Property="IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>

            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
                <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate TargetType="ComboBoxItem" x:Key="MetroComboBoxItemTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Margin="{TemplateBinding Margin}">
            <ContentPresenter Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              TextBlock.Foreground="{TemplateBinding Foreground}">
                <ContentPresenter.Resources>
                    <!-- HACK: Override the default TextBlock style -->
                    <Style TargetType="TextBlock" />
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Border>
    </ControlTemplate>

    <!-- ToolTip -->
    <ControlTemplate TargetType="ToolTip" x:Key="MetroToolTipTemplate">
        <Border BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                Background="{TemplateBinding Background}"
                Margin="{TemplateBinding Margin}">
            <ContentPresenter Margin="{TemplateBinding Padding}" />
        </Border>
    </ControlTemplate>

    <!-- ContextMenu, MenuItem & Separator
         N.B.: The MenuItem template is made for basic, non-nested, non-checked MenuItems
         TODO: Take this sad template and make it better... -->
    <ControlTemplate TargetType="ContextMenu" x:Key="MetroContextMenuTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <StackPanel IsItemsHost="True" />
        </Border>
    </ControlTemplate>

    <ControlTemplate TargetType="MenuItem" x:Key="MetroMenuItemTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="26" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <ContentControl Content="{TemplateBinding Icon}" />
                <Label Grid.Column="1" 
                       Content="{TemplateBinding Header}"
                       Foreground="{TemplateBinding Foreground}"
                       FontWeight="{TemplateBinding FontWeight}"
                       Margin="5,0" />
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate TargetType="Separator" x:Key="MetroSeparatorTemplate">
        <Rectangle Height="{TemplateBinding Height}"
                   Fill="{TemplateBinding Foreground}" />
    </ControlTemplate>

    <!-- TreeView & TreeViewItem -->
    <ControlTemplate TargetType="TreeView" x:Key="MetroTreeViewTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Margin="{TemplateBinding Margin}">
            <ScrollViewer Focusable="False"
                          CanContentScroll="False"
                          Padding="1">
                <ItemsPresenter />
            </ScrollViewer>
        </Border>
    </ControlTemplate>

    <ControlTemplate TargetType="TreeViewItem" x:Key="MetroTreeViewItemTemplate">
        <ControlTemplate.Resources>
            <ControlTemplate x:Key="FlatToggleButton" TargetType="ToggleButton">
                <Border Background="{TemplateBinding Background}">
                    <ContentPresenter />
                </Border>
            </ControlTemplate>
        </ControlTemplate.Resources>
        <StackPanel>
            <ToggleButton x:Name="Expander"
                          Template="{StaticResource FlatToggleButton}"
                          Background="{TemplateBinding Background}"
                          ClickMode="Press"
                          IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          Padding="{TemplateBinding Padding}">
                <StackPanel Orientation="Horizontal"
                            Background="Transparent">
                    <Border x:Name="ExpanderGlyphContainer"
                            BorderThickness="1"
                            BorderBrush="{TemplateBinding Foreground}"
                            Opacity="0.5"
                            VerticalAlignment="Center"
                            Margin="0,2,0,0"
                            Width="9" Height="9">
                        <Path x:Name="ExpanderGlyph" 
                              RenderOptions.EdgeMode="Aliased"
                              Margin="1"
                              StrokeThickness="1"
                              Stroke="{TemplateBinding Foreground}"
                              Data="M0,3 H5 M3,0 V5" />
                    </Border>
                    <ContentPresenter x:Name="PART_Header"
                                      RecognizesAccessKey="True"
                                      ContentSource="Header"
                                      Margin="{TemplateBinding Padding}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      TextBlock.Foreground="{TemplateBinding Foreground}">
                        <ContentPresenter.Resources>
                            <!-- HACK: Override the default TextBlock style -->
                            <Style TargetType="TextBlock" />
                        </ContentPresenter.Resources>
                    </ContentPresenter>
                </StackPanel>
            </ToggleButton>
            <ItemsPresenter x:Name="ItemsHost" 
                            Margin="20,0,0,0" />
        </StackPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="ExpanderGlyph" Property="Data" Value="M0,3 H5" />
            </Trigger>
            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="Expander" Property="IsEnabled" Value="False" />
                <Setter TargetName="ExpanderGlyphContainer" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ItemsControl (used for listboxes too) -->
    <ControlTemplate TargetType="ItemsControl" x:Key="MetroItemsControlTemplate">
        <Grid>
            <Border BorderThickness="{TemplateBinding BorderThickness}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Background="{TemplateBinding Background}">
                <ScrollViewer>
                    <StackPanel Margin="{TemplateBinding Padding}"
                                IsItemsHost="True" />
                </ScrollViewer>
            </Border>
            <!-- Shadows -->
            <Grid IsHitTestVisible="False"
                  x:Name="ShadowGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="10" />
                    <RowDefinition />
                    <RowDefinition Height="10" />
                </Grid.RowDefinitions>

                <Border Background="{DynamicResource TopShadowBrush}" />
                <Border Grid.Row="2"
                        Background="{DynamicResource BottomShadowBrush}" />
            </Grid>
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ShadowGrid" Property="Opacity" Value="0.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ListBoxItem -->
    <ControlTemplate TargetType="ListBoxItem" x:Key="MetroListBoxItemTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Margin="{TemplateBinding Margin}">
            <ContentPresenter Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              TextBlock.Foreground="{TemplateBinding Foreground}"
                              TextBlock.FontSize="{TemplateBinding FontSize}"
                              TextBlock.FontWeight="{TemplateBinding FontWeight}">
                <ContentPresenter.Resources>
                    <!-- HACK: Override the default TextBlock style -->
                    <Style TargetType="TextBlock" />
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Border>
    </ControlTemplate>

    <!-- TabItem -->
    <ControlTemplate TargetType="TabItem" x:Key="MetroTabItemTemplate">
        <Border x:Name="MainBorder"
                BorderThickness="{TemplateBinding BorderThickness}" 
                Margin="{TemplateBinding Margin}"
                BorderBrush="{TemplateBinding BorderBrush}" 
                Background="{TemplateBinding Background}">
            <ContentPresenter ContentSource="Header"
                              RecognizesAccessKey="True"
                              Content="{TemplateBinding Header}"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              TextBlock.Foreground="{TemplateBinding Foreground}">
                <ContentPresenter.Resources>
                    <!-- HACK: Override the TextBlock default style -->
                    <Style TargetType="TextBlock" />
                </ContentPresenter.Resources>
            </ContentPresenter>
        </Border>
    </ControlTemplate>

    <!-- Scrollbars styles & templates -->
    <!-- Repeat buttons between the actual scroll bar and the border -->
    <ControlTemplate TargetType="RepeatButton" x:Key="FlatRepeatButton">
        <Border Background="Transparent" />
    </ControlTemplate>
    <!-- The actual scroll bar thumbs that can be dragged -->
    <ControlTemplate TargetType="Thumb" x:Key="HorizontalThumb">
        <Grid Background="Transparent"
              Opacity="0.8">
            <Grid.RowDefinitions>
                <RowDefinition Height="3*" />
                <RowDefinition />
            </Grid.RowDefinitions>

            <Border x:Name="Border"
                    Grid.Row="1"
                    Background="{DynamicResource AccentBrush}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Grid.Row" Value="0" />
                <Setter TargetName="Border" Property="Grid.RowSpan" Value="2" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkAccentBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="Thumb" x:Key="VerticalThumb">
        <Grid Background="Transparent"
              Opacity="0.8">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Border x:Name="Border"
                    Grid.Column="1"
                    Background="{DynamicResource AccentBrush}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Border" Property="Grid.Column" Value="0" />
                <Setter TargetName="Border" Property="Grid.ColumnSpan" Value="2" />
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource DarkAccentBrush}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ScrollBar Templates using the previously created Styles -->
    <ControlTemplate TargetType="ScrollBar" x:Key="MetroVerticalScrollBarTemplate">
        <Track x:Name="PART_Track"
               IsDirectionReversed="True">
            <Track.DecreaseRepeatButton>
                <RepeatButton Template="{StaticResource FlatRepeatButton}"
                              Command="ScrollBar.PageUpCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
                <Thumb Template="{StaticResource VerticalThumb}" 
                       Margin="1" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
                <RepeatButton Template="{StaticResource FlatRepeatButton}"
                              Command="ScrollBar.PageDownCommand" />
            </Track.IncreaseRepeatButton>
        </Track>
    </ControlTemplate>
    <ControlTemplate TargetType="ScrollBar" x:Key="MetroHorizontalScrollBarTemplate">
        <Track x:Name="PART_Track"
               IsDirectionReversed="False">
            <Track.DecreaseRepeatButton>
                <RepeatButton Template="{StaticResource FlatRepeatButton}"
                               Command="ScrollBar.PageLeftCommand" />
            </Track.DecreaseRepeatButton>
            <Track.Thumb>
                <Thumb Template="{StaticResource HorizontalThumb}" 
                       Margin="1" />
            </Track.Thumb>
            <Track.IncreaseRepeatButton>
                <RepeatButton Template="{StaticResource FlatRepeatButton}"
                              Command="ScrollBar.PageRightCommand" />
            </Track.IncreaseRepeatButton>
        </Track>
    </ControlTemplate>

    <!-- FlowDocumentScrollViewer -->
    <!-- This is a voluntarily simplified template that does not include the toolbar because I don't use it -->
    <ControlTemplate TargetType="FlowDocumentScrollViewer" x:Key="MetroFlowDocumentScrollViewerTemplate">
        <Border BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <Grid>
                <ScrollViewer Name="PART_ContentHost"
                              Tag="DONT_DISABLE_SCROLLBARS"
                              Margin="{TemplateBinding Padding}" />

                <!-- Shadows -->
                <Grid IsHitTestVisible="False"
                      x:Name="ShadowGrid">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="10" />
                        <RowDefinition />
                        <RowDefinition Height="10" />
                    </Grid.RowDefinitions>

                    <Border Background="{DynamicResource TopShadowBrush}" />
                    <Border Grid.Row="2"
                            Background="{DynamicResource BottomShadowBrush}" />
                </Grid>
            </Grid>
        </Border>

        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="ShadowGrid" Property="Opacity" Value="0.5" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="False">
                <!-- Disable scrollbars -->
                <Setter TargetName="PART_ContentHost" Property="Tag" Value="" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- ProgressBar -->
    <!-- TODO: Support the IsIndeterminate state. -->
    <ControlTemplate TargetType="ProgressBar" x:Key="MetroProgressBarTemplate">
        <Grid x:Name="TemplateRoot">
            <Border Name="PART_Track" 
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}" />
            <Border Name="PART_Indicator" 
                    Background="{TemplateBinding Foreground}"
                    HorizontalAlignment="Left" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter TargetName="TemplateRoot" Property="LayoutTransform" >
                    <Setter.Value>
                        <RotateTransform Angle="-90" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- GlyphButton -->
    <ControlTemplate TargetType="my:GlyphButton" x:Key="MetroGlyphButtonTemplate">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}">
            <Path Data="{TemplateBinding Data}"
                  Stroke="{TemplateBinding Stroke}"
                  StrokeThickness="{TemplateBinding StrokeThickness}" 
                  Margin="{TemplateBinding Padding}"
                  UseLayoutRounding="True"
                  SnapsToDevicePixels="True" />
        </Border>
    </ControlTemplate>

    <!-- ResizeGrid (internal control) -->
    <ControlTemplate TargetType="myInt:ResizeGrid" x:Key="ResizeGridTemplate">
        <Grid>
            <Grid.Resources>
                <Style TargetType="Thumb">
                    <Setter Property="Opacity" Value="0" />
                    <Setter Property="myInt:ThumbDragHelper.Command" Value="{Binding ResizeCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                </Style>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="5" />
                <ColumnDefinition />
                <ColumnDefinition Width="5" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="5" />
                <RowDefinition />
                <RowDefinition Height="5" />
            </Grid.RowDefinitions>

            <Thumb Cursor="SizeNWSE"
                   myInt:ThumbDragHelper.IsLeft="True"
                   myInt:ThumbDragHelper.IsTop="True"
                   myInt:ThumbDragHelper.Direction="Both" />
            <Thumb Grid.Column="1"
                   Cursor="SizeNS"
                   myInt:ThumbDragHelper.IsTop="True"
                   myInt:ThumbDragHelper.Direction="Vertical" />
            <Thumb Grid.Column="2"
                   Cursor="SizeNESW"
                   myInt:ThumbDragHelper.IsTop="True"
                   myInt:ThumbDragHelper.Direction="Both" />

            <Thumb Grid.Row="1"
                   Cursor="SizeWE"
                   myInt:ThumbDragHelper.IsLeft="True"
                   myInt:ThumbDragHelper.Direction="Horizontal" />
            <Thumb Grid.Row="1"
                   Grid.Column="2"
                   Cursor="SizeWE"
                   myInt:ThumbDragHelper.Direction="Horizontal" />

            <Thumb Grid.Row="2"
                   Cursor="SizeNESW"
                   myInt:ThumbDragHelper.IsLeft="True"
                   myInt:ThumbDragHelper.Direction="Both" />
            <Thumb Grid.Row="2"
                   Grid.Column="1"
                   Cursor="SizeNS"
                   myInt:ThumbDragHelper.Direction="Vertical" />
            <Thumb Grid.Row="2"
                   Grid.Column="2"
                   Cursor="SizeNWSE"
                   myInt:ThumbDragHelper.Direction="Both" />
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Window.WindowState, RelativeSource={RelativeSource Self}}" Value="Maximized">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Window.ResizeMode, RelativeSource={RelativeSource Self}}" Value="NoResize">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- WindowControls (internal control) -->
    <ControlTemplate TargetType="myInt:WindowControls" x:Key="WindowControlsTemplate">
        <ControlTemplate.Resources>
            <BooleanToVisibilityConverter x:Key="Bool2Vis" />
        </ControlTemplate.Resources>

        <StackPanel Orientation="Horizontal">
            <!-- The DynamicResources are needed because this file is loaded before the styles one -->
            <my:GlyphButton Style="{DynamicResource WindowBorderButton}"
                            Command="{Binding MinimizeCommand, RelativeSource={RelativeSource TemplatedParent}, Mode=OneTime}"
                            Visibility="{Binding Window.ShowMinimizeButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Bool2Vis}}"
                            StrokeThickness="2"
                            Data="M0,9 H11" />

            <!-- Maximize glyph. HACK : it's a rectangle with lines that go back and forth to make a thick line on the top -->
            <my:GlyphButton x:Name="MaximizeRestoreButton"
                            Style="{DynamicResource WindowBorderButton}"
                            Command="{Binding MaximizeOrRestoreCommand, RelativeSource={RelativeSource TemplatedParent}, Mode=OneTime}"
                            Visibility="{Binding Window.ShowMaximizeButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Bool2Vis}}"
                            Data="M0,0 H10 V10 H0 V2 H10 V1 H0 V0 H10" 
                            RenderOptions.EdgeMode="Aliased" />

            <my:GlyphButton Style="{DynamicResource WindowBorderCloseButton}"
                            Command="{Binding CloseCommand, RelativeSource={RelativeSource TemplatedParent}, Mode=OneTime}"
                            Visibility="{Binding Window.ShowCloseButton, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource Bool2Vis}}"
                            StrokeThickness="2"
                            Data="M-0.5,-0.5 L9.5,9.5 M-0.5,9.5 L9.5,-0.5" />
        </StackPanel>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Window.WindowState, RelativeSource={RelativeSource Self}}" Value="Maximized">
                <Setter TargetName="MaximizeRestoreButton"
                                    Property="Data"
                                    Value="M0,0 H7 V7 H0 V1 H7 V0 H-0.5   M3,3 H10 V10 H3 V4 H10 V3 H2.5" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>