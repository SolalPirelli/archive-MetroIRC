<!--
Copyright (C) 2011-2012, Solal Pirelli
This code is licensed under a modified MIT License (see Properties\Licence.txt for details).
Redistributions of this source code or compiled versions of it must retain the above copyright notice and the licence.
-->

<metro:MetroWindow x:Class="MetroIrc.Desktop.Views.MainWindowView" 
                   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   xmlns:my="clr-namespace:MetroIrc.Desktop"
                   xmlns:myExt="clr-namespace:MetroIrc.Desktop.Extensions"
                   xmlns:metro="clr-namespace:MetroControls;assembly=MetroControls"
                   xmlns:irc="clr-namespace:IrcSharp;assembly=IrcSharp"
                   xmlns:loc="clr-namespace:WpfLoc;assembly=WpfLoc"
                   xmlns:com="clr-namespace:CommonStuff;assembly=CommonStuff"
                   xmlns:comConverters="clr-namespace:CommonStuff.Converters;assembly=CommonStuff"
                   xmlns:comControls="clr-namespace:CommonStuff.Controls;assembly=CommonStuff"
                   Title="{loc:Translate Global, ApplicationTitle}"
                   Icon="pack://application:,,,/Resources/icon.ico"
                   ShowIcon="False"
                   MinHeight="400" MinWidth="500"
                   Top="{my:SettingBinding MainWindowTop}" Left="{my:SettingBinding MainWindowLeft}"
                   Height="{my:SettingBinding MainWindowHeight}" Width="{my:SettingBinding MainWindowWidth}">
    <metro:MetroWindow.Resources>
        <Style x:Key="JoinChannelTextBlock" TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
            <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="FontWeight" Value="Normal" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Margin" Value="2,7" />
        </Style>

        <Style x:Key="AddNetworkTextBlock" TargetType="TextBlock" BasedOn="{StaticResource HeaderTextBlock}">
            <Setter Property="Foreground" Value="{DynamicResource AccentBrush}" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Margin" Value="7,2" />
        </Style>

        <ControlTemplate x:Key="TransparentListBoxTemplate" TargetType="ListBox">
            <StackPanel IsItemsHost="True" />
        </ControlTemplate>

        <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
            <Setter Property="Padding" Value="0" />
        </Style>

        <DataTemplate x:Key="ConversationItemTemplate">
            <Grid x:Name="MainContainer"
                  Background="Transparent"
                  com:GridExtensions.Columns="Auto, *, Auto, Auto"
                  Margin="6,2">
                <!-- Container for icon -->
                <Image Name="IconContainer"
                       Visibility="Collapsed"
                       Width="16" 
                       Height="20"
                       Margin="2,2,2,0"
                       RenderOptions.EdgeMode="Unspecified" />

                <!-- Conversation title -->
                <TextBlock x:Name="TitleBlock"
                           Grid.Column="1"
                           Text="{Binding Title}"
                           FontSize="20"
                           FontWeight="Normal"
                           TextTrimming="CharacterEllipsis" />

                <!-- Unread messages count -->
                <TextBlock x:Name="UnreadMessagesBlock"
                           Grid.Column="2"
                           Text="{Binding UnreadMessagesCount}"
                           FontSize="13"
                           Foreground="{DynamicResource AccentBrush}"
                           VerticalAlignment="Top"
                           Margin="0,-2,1,0"
                           Visibility="Collapsed" />

                <!-- Close button -->
                <metro:GlyphButton x:Name="CloseButton"
                                   Grid.Column="3"
                                   Data="M0,0 L10,10 M0,10 L10,0"
                                   Visibility="Hidden"
                                   Command="{Binding DataContext.SelectedNetwork.RemoveConversationCommand, RelativeSource={RelativeSource AncestorType=metro:MetroWindow}}"
                                   CommandParameter="{Binding}"
                                   VerticalAlignment="Center"
                                   Margin="5,4,2,0" />

                <Grid.InputBindings>
                    <MouseBinding Gesture="MiddleClick"
                                  Command="{Binding DataContext.SelectedNetwork.RemoveConversationCommand, RelativeSource={RelativeSource AncestorType=metro:MetroWindow}}"
                                  CommandParameter="{Binding}" />
                </Grid.InputBindings>
            </Grid>

            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding ConversationType}" Value="{x:Type irc:IrcChannel}">
                    <Setter TargetName="IconContainer" Property="Source" Value="{StaticResource ChannelIcon}" />
                    <Setter TargetName="IconContainer" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <DataTrigger Binding="{Binding ConversationType}" Value="{x:Type irc:IrcUser}">
                    <Setter TargetName="IconContainer" Property="Source" Value="{StaticResource UserIcon}" />
                    <Setter TargetName="IconContainer" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="True">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
                    <!-- Focus the input TB when selected -->
                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=InputTextBox}" />
                </DataTrigger>

                <DataTrigger Binding="{Binding IsVisible}" Value="False">
                    <Setter TargetName="MainContainer" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="True">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CanBeClosed}" Value="False">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding UnreadMessagesCount, 
                                               Converter={comConverters:ThresholdToBooleanConverter}, 
                                               ConverterParameter=0}"
                             Value="True">
                    <Setter TargetName="UnreadMessagesBlock" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <DataTrigger Binding="{Binding HasUnreadImportantMessage}" Value="True">
                    <Setter TargetName="TitleBlock" Property="Foreground" Value="{DynamicResource AccentBrush}" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="SimpleNetworkItemTemplate">
            <Grid com:GridExtensions.Columns="Auto, *, Auto"
                  Margin="6,2">
                <!-- Lock icon container -->
                <Image x:Name="LockContainer"
                       Source="{StaticResource LockIcon}"
                       Width="16"
                       Height="16"
                       RenderOptions.EdgeMode="Unspecified"
                       Visibility="Collapsed"
                       VerticalAlignment="Center" />

                <!-- Title -->
                <TextBlock x:Name="TitleBlock"
                           Grid.Column="1"
                           com:TypographyExtensions.UppercaseText="{Binding Title}"
                           FontWeight="Bold"
                           FontSize="14"
                           TextTrimming="CharacterEllipsis"
                           Margin="3,0" />

                <!-- Close button -->
                <metro:GlyphButton x:Name="CloseButton" 
                                   Grid.Column="2"
                                   Visibility="Hidden"
                                   Data="M0,0 L10,10 M0,10 L10,0"
                                   Command="{Binding DataContext.RemoveNetworkCommand, RelativeSource={RelativeSource AncestorType=metro:MetroWindow}}"
                                   CommandParameter="{Binding}" />

                <Grid.InputBindings>
                    <MouseBinding Gesture="MiddleClick" 
                                  Command="{Binding DataContext.RemoveNetworkCommand, RelativeSource={RelativeSource AncestorType=metro:MetroWindow}}"
                                  CommandParameter="{Binding}" />
                </Grid.InputBindings>
            </Grid>

            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding HasUnreadMessages}" Value="True">
                    <Setter TargetName="TitleBlock" Property="Foreground" Value="{DynamicResource VeryDarkAccentBrush}" />
                </DataTrigger>

                <DataTrigger Binding="{Binding HasHighlightedUnreadMessages}" Value="True">
                    <Setter TargetName="TitleBlock" Property="Foreground" Value="{DynamicResource AccentBrush}" />
                </DataTrigger>

                <DataTrigger Binding="{Binding NetworkInfo.UseSsl}" Value="True">
                    <Setter TargetName="LockContainer" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="True">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
                    <!-- Focus the input TB when selected -->
                    <Setter Property="FocusManager.FocusedElement" Value="{Binding ElementName=InputTextBox}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=ContentControl}}" Value="True">
                    <Setter TargetName="CloseButton" Property="Visibility" Value="Visible" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <DataTemplate x:Key="TreeNetworkItemTemplate">
            <StackPanel Margin="1,0,1,10">
                <ContentPresenter ContentTemplate="{StaticResource SimpleNetworkItemTemplate}"
                                  Content="{Binding}"
                                  Margin="1,1,5,1" />
                <!-- Channels -->
                <StackPanel Margin="8,1,2,1">
                    <ListBox Grid.Row="1"
                             Grid.ColumnSpan="2"
                             ItemsSource="{Binding Conversations}"
                             SelectedItem="{Binding SelectedConversation}"
                             Template="{StaticResource TransparentListBoxTemplate}"
                             ItemTemplate="{StaticResource ConversationItemTemplate}" />

                    <!-- Join channel -->
                    <Grid Background="Transparent">
                        <TextBlock Style="{StaticResource JoinChannelTextBlock}"
                                   Text="{loc:Translate MainWindow, JoinChannel}" />
                        <Grid.InputBindings>
                            <MouseBinding Gesture="LeftClick" Command="{Binding JoinChannelCommand}" />
                            <MouseBinding Gesture="LeftDoubleClick" Command="{Binding JoinChannelCommand}" />
                        </Grid.InputBindings>
                    </Grid>
                </StackPanel>
            </StackPanel>
        </DataTemplate>
    </metro:MetroWindow.Resources>

    <metro:MetroWindow.InputBindings>
        <KeyBinding Gesture="Ctrl+Tab" Command="{Binding SelectedNetwork.SwitchConversationCommand}" />
        <KeyBinding Gesture="Ctrl+Shift+Tab" Command="{Binding SwitchNetworkCommand}" />
    </metro:MetroWindow.InputBindings>

    <metro:MetroWindow.BorderContent>
        <StackPanel Orientation="Horizontal"
                    HorizontalAlignment="Right"
                    Margin="0,0,20,0">
            <Button Style="{StaticResource TextButtonStyle}"
                    Content="{loc:Translate MainWindow, Settings}"
                    Command="{Binding ShowSettingsCommand}" />

            <TextBlock Text="|"
                       Margin="5,0" />

            <Button Style="{StaticResource TextButtonStyle}"
                    Content="{loc:Translate MainWindow, About}"
                    Command="{Binding ShowAboutWindowCommand}" />
        </StackPanel>
    </metro:MetroWindow.BorderContent>

    <Grid com:GridExtensions.Columns="Auto, *, Auto"
          com:GridExtensions.Rows="Auto, *, Auto">
        <!-- Left/Right pane -->
        <Grid x:Name="VerticalNetworksPane"
              Grid.Row="1"
              Grid.RowSpan="2"
              Width="170">
            <Border Background="{DynamicResource BackgroundBrush}"
                    Opacity="0.2" />
            <ScrollViewer>
                <StackPanel>
                    <StackPanel.Resources>
                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="TextBlock.Foreground" Value="{DynamicResource TabForegroundBrush}" />
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource TabHoverForegroundBrush}" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="Transparent" />
                                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource TabSelectedForegroundBrush}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Resources>
                    <ListBox ItemsSource="{Binding Networks}"
                             SelectedItem="{Binding SelectedNetwork}"
                             ItemTemplate="{StaticResource TreeNetworkItemTemplate}"
                             Template="{StaticResource TransparentListBoxTemplate}"
                             VerticalContentAlignment="Stretch" />

                    <!-- Add network -->
                    <Grid Background="Transparent">
                        <TextBlock Style="{StaticResource AddNetworkTextBlock}"
                                   Text="{loc:Translate MainWindow, AddNetwork}" />
                        <Grid.InputBindings>
                            <MouseBinding Gesture="LeftClick" Command="{Binding AddNetworkCommand}" />
                            <MouseBinding Gesture="LeftDoubleClick" Command="{Binding AddNetworkCommand}" />
                        </Grid.InputBindings>
                    </Grid>
                </StackPanel>
            </ScrollViewer>

            <!-- Shadow -->
            <Grid com:GridExtensions.Columns="10, *, 10"
                  IsHitTestVisible="False">
                <Border x:Name="LeftShadowBorder"
                        Background="{DynamicResource LeftShadowBrush}" />
                <Border x:Name="RightShadowBorder"
                        Grid.Column="2"
                        Background="{DynamicResource RightShadowBrush}" />
            </Grid>
        </Grid>

        <!-- Top pane -->
        <StackPanel x:Name="HorizontalNetworksPane"
                    Grid.Column="1"
                    Margin="0,0,0,5">
            <comControls:TabPanelEx ItemsSource="{Binding Networks}"
                                    SelectedItem="{Binding SelectedNetwork}"
                                    ItemTemplate="{StaticResource SimpleNetworkItemTemplate}">
                <comControls:TabPanelEx.NewTabHeader>
                    <TextBlock Style="{StaticResource AddNetworkTextBlock}"
                               Text="{loc:Translate MainWindow, AddNetwork}">
                        <TextBlock.InputBindings>
                            <MouseBinding Gesture="LeftClick" Command="{Binding AddNetworkCommand}" />
                        </TextBlock.InputBindings>
                    </TextBlock>
                </comControls:TabPanelEx.NewTabHeader>
            </comControls:TabPanelEx>

            <comControls:TabPanelEx ItemsSource="{Binding SelectedNetwork.Conversations}"
                                    SelectedItem="{Binding SelectedNetwork.SelectedConversation}"
                                    ItemTemplate="{StaticResource ConversationItemTemplate}"
                                    Visibility="{Binding SelectedNetwork, Converter={comConverters:NotNullToVisibilityConverter}}"
                                    Margin="2,0,0,0">
                <comControls:TabPanelEx.NewTabHeader>
                    <TextBlock Style="{StaticResource JoinChannelTextBlock}"
                               Text="{loc:Translate MainWindow, JoinChannel}">
                        <TextBlock.InputBindings>
                            <MouseBinding Gesture="LeftClick" Command="{Binding SelectedNetwork.JoinChannelCommand}" />
                        </TextBlock.InputBindings>
                    </TextBlock>
                </comControls:TabPanelEx.NewTabHeader>
            </comControls:TabPanelEx>
        </StackPanel>

        <!-- Current conversation -->
        <!-- HACK
             A ContentPresenter trashes its old content when it changes, which results in long delays when switching.
             To prevent this, all networks and channels are always in the window, but they're visible only if they're selected. -->
        <ItemsControl x:Name="ConversationContainer"
                      Grid.Column="1"
                      Grid.Row="1"
                      ItemsSource="{Binding Networks}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <ItemsControl x:Name="Container" 
                                  ItemsSource="{Binding Conversations}"
                                  Visibility="Hidden">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <ContentPresenter x:Name="Presenter" 
                                                  Content="{Binding}"
                                                  Visibility="Hidden" />
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                        <Setter TargetName="Presenter" Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsSelected}" Value="True">
                            <Setter TargetName="Container" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>

        <!-- TextBox for Nickname, TextBox & Button to send messages -->
        <Border Grid.Row="2"
                Grid.Column="1"
                Visibility="{Binding SelectedNetwork, Converter={comConverters:NotNullToVisibilityConverter}}"
                Padding="5">
            <Grid com:GridExtensions.Columns="145, *, Auto">
                <!-- Nickname (editable) -->
                <TextBox Style="{StaticResource EditableUserTextBlock}"
                         Text="{Binding SelectedNetwork.CurrentNickname}"
                         AcceptsTab="False" />

                <!-- Text -->
                <TextBox x:Name="InputTextBox"
                         Grid.Column="1"
                         Style="{StaticResource SpecialTextBox}"
                         Text="{Binding SelectedNetwork.WrittenText, UpdateSourceTrigger=PropertyChanged}"
                         SpellCheck.IsEnabled="True"
                         Margin="3,0,0,0"
                         Padding="0,0,5,0"
                         com:AutoComplete.MatchesSource="{Binding SelectedNetwork.SelectedConversation.UserNames}"
                         com:TextHistory.IsEnabled="True"
                         myExt:TextBoxExtensions.AllowFormattingChars="True"
                         AcceptsTab="False">
                    <TextBox.InputBindings>
                        <KeyBinding Key="Enter" Command="{Binding SelectedNetwork.SendMessageCommand}" />
                    </TextBox.InputBindings>
                </TextBox>

                <!-- Send -->
                <Button Grid.Column="2"
                        Content="{loc:Translate MainWindow, Send}"
                        Command="{Binding SelectedNetwork.SendMessageCommand}"
                        Margin="-5,0,0,0" />
            </Grid>
        </Border>
    </Grid>
</metro:MetroWindow>